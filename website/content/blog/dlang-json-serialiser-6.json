{"html":"<p>This post concludes this short tutorial series by exploring the options that <a href=\"https://dlang.org/spec/template-mixin.html\">mixin templates</a>\ncan provide us.</p><p>The code we create in this post won&apos;t be very practical (quite the opposite), however it will show you more magical non-sense\nthat can be achieved with D, and can serve as a basis for your future code. :)</p><h2 id=\"why-use-and-what-is-a--mixin-template--\">Why use and what is a <code>mixin template</code>?</h2><p>A <code>mixin template</code> is a way to create a block of code that we can then &quot;copy &amp; paste&quot; into\nother pieces of code. It can be used as a way to automate the generation of boilerplate code, since the full\nfeatures of D (especially <code>static if</code> and string mixins) are available for it to use.</p><p>In the context of our serialiser, we could create a <code>mixin template</code> to automatically generate the static <code>deserialise</code> function\nthat our deserialiser has support for (created in <a href=\"/BlogPost/JsonSerialiser/3-serialise-enum-class-dlang-tutorial-metaprogramming\">post 3</a>).</p><h2 id=\"creating-a-class-to-test-with\">Creating a class to test with</h2><p>For reasons I&apos;ll make clear shortly, the function we&apos;re generating will only support classes, so let&apos;s go ahead and make one for us to play with!</p><pre><code>class PersonClass\n{\n    private\n    {\n        string name;\n        int age;\n        PersonType type;\n    }\n\n    this()\n    {\n    }\n\n    this(string name, int age, PersonType type)\n    {\n        this.name = name;\n        this.age = age;\n        this.type = type;\n    }\n\n    override string toString()\n    {\n        import std.format : format;\n        return \"I am %s, I am %s years old, and I'm a %s.\".format(this.name, this.age, this.type);\n    }\n}\n</code></pre><h2 id=\"creating-and-using-a--mixin-template-\">Creating and using a <code>mixin template</code></h2><p>The most basic form of a <code>mixin template</code> is really simple. Take note that this one is named <code>AutoStaticDeserialise</code>, as this is\nessentially the purpose of this <code>mixin template</code>.</p><pre><code>// You can define template parameters in the parenthesis, just like you would for a templated function.\nmixin template AutoStaticDeserialise()\n{\n}\n</code></pre><p>To make use of our mixin, we simply have to add the following line into our <code>PersonClass</code>:</p><pre><code>class PersonClass\n{\n    mixin AutoStaticDeserialise;\n\n    // omitted...\n}\n</code></pre><p>And now once we&apos;ve added some code into the <code>mixin template</code>, it&apos;ll start having an effect on our <code>PersonClass</code>.</p><h2 id=\"an-interesting-property-of--mixin-template-\">An interesting property of <code>mixin template</code></h2><p>An interesting, and very useful property of <code>mixin template</code> is that, as stated before, the code inside it is functionally\n&quot;copy &amp; pasted&quot; into its location.</p><p>Let me show you how we can test this:</p><pre><code>// https://godbolt.org/z/6gWC2B\n\nmixin template AutoStaticDeserialise()\n{\n    private alias ThisType = typeof(this);\n    \n    pragma(msg, ThisType);\n}\n\nclass PersonClass\n{\n    mixin AutoStaticDeserialise;\n\n    private\n    {\n        string name;\n        // omitted...\n    }\n    // omitted...\n}\n\n/*\n    Output:  \n        PersonClass\n*/\n</code></pre><p>To explain - since the code has been &apos;pasted&apos; into <code>PersonClass</code>, the expression <code>typeof(this)</code> evaluates to the type\nthat has used our mixin, which is <code>PersonClass</code> in this case.</p><p>A more important point is, this means we can even access <em>private</em> members of the type the template is being mixed in to. Take notice\nthat <code>PersonClass</code> has some private variables, and I&apos;m sure you can see where this is going.</p><h2 id=\"adding-some-compile-time-checks\">Adding some compile-time checks</h2><p>The <code>deserialise</code> function we&apos;re generating isn&apos;t actually all that important for the purpose of this post. This post is simply to teach\nabout <code>mixin template</code>, so we&apos;re going to generate a rather useless <code>deserialise</code> function just so we have something there at all.</p><p>Therefor, our <code>deserialise</code> function will only work for classes, and will require a default constructor in order to function, so let&apos;s\nadd in a few <code>static asserts</code> to enforce this behaviour:</p><pre><code>mixin template AutoStaticDeserialise()\n{\n    private alias ThisType = typeof(this);\n    static assert(is(ThisType == class), \"This mixin only works with classes.\");\n    static assert(HasDefaultCtor!ThisType, \"This function relies on the class having a default constructor.\");\n}\n</code></pre><h2 id=\"creating-the--deserialise--function\">Creating the <code>deserialise</code> function</h2><p>I&apos;m not going to waste much time explaining this code, as it is quite literally a very gutted version of the\nstruct/class deserialisation branch that we&apos;ve already created in our deserialiser.</p><p>The main thing to note is that we can directly modify the private variables of the class due to the &quot;copy &amp; paste&quot; property\nof mixin templates.</p><pre><code>mixin template AutoStaticDeserialise()\n{\n    private alias ThisType = typeof(this);\n    static assert(is(ThisType == class), \"This mixin only works with classes.\");\n    static assert(HasDefaultCtor!ThisType, \"This function relies on the class having a default constructor.\");\n\n    public static ThisType deserialise(JSONValue json)\n    {\n        if(json.type == JSONType.null_)\n        {\n            return null;\n        }\n\n        auto instance = new ThisType();\n\n        static foreach(member; ThisType.tupleof)\n        {{\n            alias MemberType = typeof(member);\n            const MemberName = __traits(identifier, member);\n\n            MemberType memberValue = json[MemberName].deserialise!MemberType();\n            mixin(\"instance.\" ~ MemberName ~ \" = memberValue;\");\n        }}\n\n        return instance;\n    }\n}\n</code></pre><h2 id=\"testing-things-worked\">Testing things worked</h2><p>If we now make use of our deserialiser, it should end up calling our automatically generated <code>deserialise</code> function:</p><pre><code>// https://godbolt.org/z/kUXvzB\nvoid main()\n{\n    import std.stdio : writeln;\n\n    auto person = new PersonClass(\"Bradley\", 21, PersonType.Student);\n    writeln(deserialise!PersonClass(parseJSON(`{ \"name\": \"Bradley\", \"age\": 21, \"type\": \"Student\" }`)));\n}\n\n/*\n    Output:\n        I am Bradley, I am 21 years old, and I'm a Student.\n*/\n</code></pre><h2 id=\"conclusion\">Conclusion</h2><p>Even if this post was quite short and basic, it covers one of the last core features of D&apos;s metaprogramming features. The only other core\nfeature I haven&apos;t covered are <a href=\"https://dlang.org/spec/template.html#implicit_template_properties\">eponymous templates</a>, as I couldn&apos;t think\nof a way to fit them into the context of this serialiser.</p><p>Anyway, I hope the knowledge (and awful writing style!) of this tutorial series will have helped bootstrap your knowledge of D&apos;s metaprogramming, aiding\nyou in any future endevors.</p><p>If you&apos;ve enjoyed this series, please share it around to whomever you may think will be interested.</p><p>If you have any suggestions or improvements, feel free to either directly propose changes using the &quot;Improve on Github&quot; button below; open an issue on Github, or even just\nemail me. I&apos;m open to changes and criticism.</p><p>Thank you.</p>","metadata":["dlang-json-serialiser-6","mixin-template-automate","07-05-2020","Mixin template to automate static deserialise","07-05-2020"],"headers":[{"text":"Why use and what is a `mixin template`?","slug":"why-use-and-what-is-a--mixin-template--","level":2},{"text":"Creating a class to test with","slug":"creating-a-class-to-test-with","level":2},{"text":"Creating and using a `mixin template`","slug":"creating-and-using-a--mixin-template-","level":2},{"text":"An interesting property of `mixin template`","slug":"an-interesting-property-of--mixin-template-","level":2},{"text":"Adding some compile-time checks","slug":"adding-some-compile-time-checks","level":2},{"text":"Creating the `deserialise` function","slug":"creating-the--deserialise--function","level":2},{"text":"Testing things worked","slug":"testing-things-worked","level":2},{"text":"Conclusion","slug":"conclusion","level":2}]}